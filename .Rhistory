install.packages ("usethis")
usethis::create_github_token()
gitcreds::gitcreds_set()
###########
### Lab 4
###########
# Load necessary libraries
library(tidyverse)
library(table1) ## a new library that you may need to install first before using
# create a R data frame using the csv data
b_fitness <- read_csv("/Users/qy11/Library/CloudStorage/Box-Box/1 Teaching/N911/Fall 2025/Lab/data/b_fitness.csv"))
# create a R data frame using the csv data
b_fitness <- read_csv("/Users/qy11/Library/CloudStorage/Box-Box/1 Teaching/N911/Fall 2025/Lab/data/b_fitness.csv")
View(b_fitness)
View(b_fitness)
### More data management and data visualization
# create frequency table for table with both counts and percentages
table1(~Gender, data=b_fitness)
View(b_fitness)
x<- read_csv("/Users/qy11/Library/CloudStorage/Box-Box/1 Teaching/N911/Fall 2025/Lab/data/b_fitness.csv")
### More data management and data visualization
# create frequency table for table with both counts and percentages
y <- table1(~Gender, data=b_fitness)
View(b_fitness)
b_fitness<- read_csv("/Users/qy11/Library/CloudStorage/Box-Box/1 Teaching/N911/Fall 2025/Lab/data/b_fitness.csv")
### More data management and data visualization
# create frequency table for table with both counts and percentages
y <- table1(~gender, data=b_fitness)
View(b_fitness)
### More data management and data visualization
# create frequency table for table with both counts and percentages
y <- table1(~Gender, data=b_fitness)
y
b_fitness <- b_fitness %>%
mutate(
# Create a new variable 'perform_cat':
# If Performance score >= 8, assign 1; if 4<=Performance score<8, assign 2, if performance score <4, assign 3
Perform_cat = case_when(
Performance >= 8           ~ 1,
Performance >= 4 & Performance < 8 ~ 2,
Performance < 4            ~ 3)
)
View(b_fitness)
# create a R data frame using the csv data
x= read_csv("/Users/qy11/Library/CloudStorage/Box-Box/1 Teaching/N911/Fall 2025/Lab/data/b_fitness.csv")
View(x)
table1(~Perform_cat, data=b_fitness)
View(b_fitness)
b_fitness <- b_fitness %>%
mutate(
# Create a new variable 'perform_cat':
# If Performance score >= 8, assign 1; if 4<=Performance score<8, assign 2, if performance score <4, assign 3
Perform_cat = case_when(
Performance >= 8           ~ 1,
Performance >= 4 & Performance < 8 ~ 2,
Performance < 4            ~ 3),
# Convert 'Perform_cat' from numeric (1,2,3) to a factor and attach descriptive labels to the variable values
Perform_cat = factor(Perform_cat, levels = c(1,2,3), labels = c("Good", "Fair","Poor"))
)
View(b_fitness)
### More data management and data visualization
# create frequency table for table with both counts and percentages
table1(~Perform_cat, data=b_fitness)
b_fitness <- b_fitness %>%
mutate(
# Create a new variable 'perform_cat':
# If Performance score >= 8, assign 1; if 4<=Performance score<8, assign 2, if performance score <4, assign 3
Perform_cat = case_when(
Performance >= 8           ~ 1,
Performance >= 4 & Performance < 8 ~ 2,
Performance < 4            ~ 3),
# Convert 'Perform_cat' from numeric (1,2,3) to a factor and attach descriptive labels to the variable values
Perform_cat = factor(Perform_cat, levels = c(1,2,3), labels = c("Good", "Fair","Poor")) ,
#Attach label to Gender
Gender=factor(Gender, levels = c("F", "M"), labels = c("Female", "Male"))
)
# create frequency table for table with both counts and percentages
# value labels will shown in the table after attaching labels to the variable values
table1(~Gender, data=b_fitness)
View(b_fitness)
View(b_fitness)
b_fitness<- read_csv("/Users/qy11/Library/CloudStorage/Box-Box/1 Teaching/N911/Fall 2025/Lab/data/b_fitness.csv")
View(b_fitness)
View(b_fitness)
b_fitness<- read_csv("/Users/qy11/Library/CloudStorage/Box-Box/1 Teaching/N911/Fall 2025/Lab/data/b_fitness.csv")
b_fitness <- b_fitness %>%
mutate(
# Create a new variable 'perform_cat':
# If Performance score >= 8, assign 1; if 4<=Performance score<8, assign 2, if performance score <4, assign 3
Perform_cat = case_when(
Performance >= 8           ~ 1,
Performance >= 4 & Performance < 8 ~ 2,
Performance < 4            ~ 3))
View(b_fitness)
b_fitness <- b_fitness %>%
mutate(
# Convert 'Perform_cat' from numeric (1,2,3) to a factor and attach descriptive labels to the variable values
Perform_cat = factor(Perform_cat, levels = c(1,2,3), labels = c("Good", "Fair","Poor")) ,
)
View(b_fitness)
b_fitness <- b_fitness %>%
mutate(
#Attach label to Gender
Gender=factor(Gender, levels = c("F", "M"), labels = c("Female", "Male"))
)
62+2.37
62+2.37*2
62+2.37*3
62-2.37*3
62-2.37*2
62-2.37
pnorm(1.99)
1-pnorm(1.99)
?pnorm
1-pnorm(66.72,62,2.37)
qnorm(0.975)
12.97/sart(1000)
12.97/sqrt(1000)
1/0.41
1-pnorm(2.44)
mu0 <- 62; sigma <- 12.97; n <- 1000
se <- sigma/sqrt(n)
xbar <- 63
x <- seq(mu0-4*se, mu0+4*se, length=500)
pdf <- dnorm(x, mu0, se)
plot(x, pdf, type="l", lwd=2, main="Sampling distribution under H0 (mu=62)",
xlab="Sample mean", ylab="Density")
abline(v=xbar, lty=2)
# Shade p-value area (two-tailed)
polygon(c(x[x>=xbar], rev(x[x>=xbar])), c(pdf[x>=xbar], rep(0,sum(x>=xbar))),
col=rgb(1,0,0,0.5), border=NA)
mirror <- mu0 - (xbar - mu0)
polygon(c(x[x<=mirror], rev(x[x<=mirror])), c(pdf[x<=mirror], rep(0,sum(x<=mirror))),
col=rgb(1,0,0,0.5), border=NA)
plot()
\
62+0.41
62+0.41*2
62+0.41*3
1-pnorm(63,62,0.41)
? pt
1-pt(1.63,30)
# H0: mean weight = 75
# Ha: mean weight != 75 (two-sided)
t.test(b_fitness$Weight, mu = 75, alternative = "two.sided", conf.level = 0.95)
mu0 <- 62; sigma <- 12.97; n <- 1000
se <- sigma/sqrt(n)
xbar <- 63
x <- seq(mu0-4*se, mu0+4*se, length=500)
pdf <- dnorm(x, mu0, se)
plot(x, pdf, type="l", lwd=2, main="Sampling distribution under H0 (mu=62)",
xlab="Sample mean", ylab="Density")
abline(v=xbar, lty=2)
se
polygon(c(x[x>=xbar], rev(x[x>=xbar])), c(pdf[x>=xbar], rep(0,sum(x>=xbar))),
col=rgb(1,0,0,0.5), border=NA)
mirror <- mu0 - (xbar - mu0)
polygon(c(x[x<=mirror], rev(x[x<=mirror])), c(pdf[x<=mirror], rep(0,sum(x<=mirror))),
col=rgb(1,0,0,0.5), border=NA)
mu0 <- 62; sigma <- 12.97; n <- 1000
se <- sigma/sqrt(n)
xbar <- 63
x <- seq(mu0-4*se, mu0+4*se, length=500)
pdf <- dnorm(x, mu0, se)
plot(x, pdf, type="l", lwd=2, main="Sampling distribution under H0 (mu=62)",
xlab="Sample mean", ylab="Density", xaxt="n")
# Add custom x-axis ticks at mu0 ± 1SE, 2SE, 3SE
ticks <- mu0 + c(-3, -2, -1, 0, 1, 2, 3) * se
axis(1, at=ticks, labels=round(ticks, 2))
# Reference lines for SE positions
abline(v=ticks, col="gray80", lty=3)
# Mark observed sample mean
abline(v=xbar, lty=2, col="blue")
# Shade p-value area (two-tailed)
polygon(c(x[x>=xbar], rev(x[x>=xbar])), c(pdf[x>=xbar], rep(0,sum(x>=xbar))),
col=rgb(1,0,0,0.5), border=NA)
mirror <- mu0 - (xbar - mu0)
polygon(c(x[x<=mirror], rev(x[x<=mirror])), c(pdf[x<=mirror], rep(0,sum(x<=mirror))),
col=rgb(1,0,0,0.5), border=NA)
mu0 <- 62; sigma <- 12.97; n <- 1000
se <- sigma/sqrt(n)
xbar <- 63
x <- seq(mu0-4*se, mu0+4*se, length=500)
pdf <- dnorm(x, mu0, se)
plot(x, pdf, type="l", lwd=2, main="Sampling distribution under H0 (mu=62)",
xlab="Sample mean", ylab="Density", xaxt="n")
# Add custom x-axis ticks at mu0 ± 1SE, 2SE, 3SE
ticks <- mu0 + c(-3, -2, -1, 0, 1, 2, 3) * se
axis(1, at=ticks, labels=round(ticks, 1))
# Reference lines for SE positions
abline(v=ticks, col="gray80", lty=3)
# Mark observed sample mean
abline(v=xbar, lty=2, col="blue")
# Shade p-value area (two-tailed)
polygon(c(x[x>=xbar], rev(x[x>=xbar])), c(pdf[x>=xbar], rep(0,sum(x>=xbar))),
col=rgb(1,0,0,0.5), border=NA)
mirror <- mu0 - (xbar - mu0)
polygon(c(x[x<=mirror], rev(x[x<=mirror])), c(pdf[x<=mirror], rep(0,sum(x<=mirror))),
col=rgb(1,0,0,0.5), border=NA)
mu0 <- 62; sigma <- 12.97; n <- 30
se <- sigma/sqrt(n)
xbar <- 66.72
x <- seq(mu0-4*se, mu0+4*se, length=500)
pdf <- dnorm(x, mu0, se)
plot(x, pdf, type="l", lwd=2, main="Sampling distribution under H0 (mu=62)",
xlab="Sample mean", ylab="Density", xaxt="n")
# Add custom x-axis ticks at mu0 ± 1SE, 2SE, 3SE
ticks <- mu0 + c(-3, -2, -1, 0, 1, 2, 3) * se
axis(1, at=ticks, labels=round(ticks, 1))
# Reference lines for SE positions
abline(v=ticks, col="gray80", lty=3)
# Mark observed sample mean
abline(v=xbar, lty=2, col="blue")
# Shade p-value area (two-tailed)
polygon(c(x[x>=xbar], rev(x[x>=xbar])), c(pdf[x>=xbar], rep(0,sum(x>=xbar))),
col=rgb(1,0,0,0.5), border=NA)
mirror <- mu0 - (xbar - mu0)
polygon(c(x[x<=mirror], rev(x[x<=mirror])), c(pdf[x<=mirror], rep(0,sum(x<=mirror))),
col=rgb(1,0,0,0.5), border=NA)
mu0 <- 62; sigma <- 12.97; n <- 30
se <- sigma/sqrt(n)
xbar <- 66.72
x <- seq(mu0-4*se, mu0+4*se, length=500)
pdf <- dnorm(x, mu0, se)
plot(x, pdf, type="l", lwd=2, main="Sampling distribution under H0 (mu=62)",
xlab="Sample mean", ylab="Density", xaxt="n")
# Add custom x-axis ticks at mu0 ± 1SE, 2SE, 3SE
ticks <- mu0 + c(-3, -2, -1, 0, 1, 2, 3) * se
axis(1, at=ticks, labels=round(ticks, 2))
# Reference lines for SE positions
abline(v=ticks, col="gray80", lty=3)
# Mark observed sample mean
abline(v=xbar, lty=2, col="blue")
# Shade p-value area (two-tailed)
polygon(c(x[x>=xbar], rev(x[x>=xbar])), c(pdf[x>=xbar], rep(0,sum(x>=xbar))),
col=rgb(1,0,0,0.5), border=NA)
mirror <- mu0 - (xbar - mu0)
polygon(c(x[x<=mirror], rev(x[x<=mirror])), c(pdf[x<=mirror], rep(0,sum(x<=mirror))),
col=rgb(1,0,0,0.5), border=NA)
# create a R data frame using the csv data
b_fitness <- read_csv("/Users/qy11/Library/CloudStorage/Box-Box/1 Teaching/N911/Fall 2025/Lab/data/b_fitness.csv"))
# create a R data frame using the csv data
b_fitness <- read_csv("/Users/qy11/Library/CloudStorage/Box-Box/1 Teaching/N911/Fall 2025/Lab/data/b_fitness.csv")
b_fitness <- b_fitness %>%
mutate(
#Attach label to Gender
Gender=factor(Gender, levels = c("F", "M"), labels = c("Female", "Male"))
)
ggplot(b_fitness, aes(x = Gender, y = Performance))+
geom_boxplot() +
xlab("Gender") +
ylab("Performance") +
ggtitle("Boxplot of performance by gender")
b_fitness %>%
group_by(Gender) %>%
summarise(n = n(),
mean = mean(Performance, na.rm = TRUE),
sd = sd(Performance, na.rm = TRUE))
# t-test for performance by gender
t_test_result <- t.test(b_fitness$Performance ~ b_fitness$Gender)
t_test_info <- data.frame(
Statistic = t_test_result$statistic,
P_Value = t_test_result$p.value,
Confidence_Interval = paste(t_test_result$conf.int[1], "-", t_test_result$conf.int[2]),
Mean_Difference = t_test_result$estimate[1] - t_test_result$estimate[2]
)
print(t_test_info)
# t-test for performance by gender
t.test(b_fitness$Performance ~ b_fitness$Gender)
ggplot(b_fitness, aes(x = Gender, y = Performance))+
geom_boxplot() +
xlab("Gender") +
ylab("Performance") +
ggtitle("Boxplot of performance by gender")
par(mfrow = c(1, 2))  # put two histograms side by side
hist(b_fitness$Performance[b_fitness$Gender == "Male"],
main = "Histogram: Male", xlab = "Performance", col = "lightblue")
hist(b_fitness$Performance[b_fitness$Gender == "Female"],
main = "Histogram: Female", xlab = "Performance", col = "lightpink")
par(mfrow = c(1, 2))
qqnorm(b_fitness$Performance[b_fitness$Gender == "Male"],
main = "Q-Q Plot: Male")
qqline(b_fitness$Performance[b_fitness$Gender == "Male"], col = "red")
qqnorm(b_fitness$Performance[b_fitness$Gender == "Female"],
main = "Q-Q Plot: Female")
qqline(b_fitness$Performance[b_fitness$Gender == "Female"], col = "red")
# t-test for performance by gender
t.test(b_fitness$Performance ~ b_fitness$Gender)
b_fitness <- b_fitness %>%
mutate(
#Attach label to Gender
Gender=factor(Gender, levels = c("F", "M"), labels = c("Female", "Male"))
)
boxplot(Performance ~ Gender,
data = b_fitness,
xlab = "Gender",
ylab = "Performance",
main = "Boxplot of performance by gender",
col = c("lightblue", "lightpink"))  # optional colors
boxplot(b_fitness$Performance ~ b_fitness$Gender,
xlab = "Gender",
ylab = "Performance",
main = "Boxplot of performance by gender",
col = c("lightblue", "lightpink"))  # optional colors
View(b_fitness)
View(b_fitness)
# create a R data frame using the csv data
b_fitness <- read_csv("/Users/qy11/Library/CloudStorage/Box-Box/1 Teaching/N911/Fall 2025/Lab/data/b_fitness.csv")
b_fitness <- b_fitness %>%
mutate(
#Attach label to Gender
Gender=factor(Gender, levels = c("F", "M"), labels = c("Female", "Male"))
)
# Boxplot
boxplot(b_fitness$Performance ~ b_fitness$Gender,
xlab = "Gender",
ylab = "Performance",
main = "Boxplot of performance by gender",
col = c("lightblue", "lightpink"))  # optional colors
par(mfrow = c(1, 1))
# Boxplot
boxplot(b_fitness$Performance ~ b_fitness$Gender,
xlab = "Gender",
ylab = "Performance",
main = "Boxplot of performance by gender",
col = c("lightblue", "lightpink"))  # optional colors
# Descriptive table by two groups
b_fitness %>%
group_by(Gender) %>%
summarise(n = n(),
mean = mean(Performance, na.rm = TRUE),
sd = sd(Performance, na.rm = TRUE))
qqnorm(b_fitness$Performance[b_fitness$Gender == "Male"],
main = "Q-Q Plot: Male")
